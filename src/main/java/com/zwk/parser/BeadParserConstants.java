/* Generated By:JavaCC: Do not edit this line. BeadParserConstants.java */
package com.zwk.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface BeadParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 7;
  /** RegularExpression Id. */
  int BREAK = 8;
  /** RegularExpression Id. */
  int CONST = 9;
  /** RegularExpression Id. */
  int CONTINUE = 10;
  /** RegularExpression Id. */
  int ELSE = 11;
  /** RegularExpression Id. */
  int FALSE = 12;
  /** RegularExpression Id. */
  int FOR = 13;
  /** RegularExpression Id. */
  int IF = 14;
  /** RegularExpression Id. */
  int IMPORT = 15;
  /** RegularExpression Id. */
  int NULL = 16;
  /** RegularExpression Id. */
  int RETURN = 17;
  /** RegularExpression Id. */
  int TRUE = 18;
  /** RegularExpression Id. */
  int VAR = 19;
  /** RegularExpression Id. */
  int FUNC = 20;
  /** RegularExpression Id. */
  int AND = 21;
  /** RegularExpression Id. */
  int OR = 22;
  /** RegularExpression Id. */
  int AS = 23;
  /** RegularExpression Id. */
  int DEFER = 24;
  /** RegularExpression Id. */
  int IN = 25;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 26;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 27;
  /** RegularExpression Id. */
  int HEX_LITERAL = 28;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 29;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 30;
  /** RegularExpression Id. */
  int EXPONENT = 31;
  /** RegularExpression Id. */
  int STRING_LITERAL = 32;
  /** RegularExpression Id. */
  int IDENTIFIER = 33;
  /** RegularExpression Id. */
  int LETTER = 34;
  /** RegularExpression Id. */
  int DIGIT = 35;
  /** RegularExpression Id. */
  int LPAREN = 36;
  /** RegularExpression Id. */
  int RPAREN = 37;
  /** RegularExpression Id. */
  int LBRACE = 38;
  /** RegularExpression Id. */
  int RBRACE = 39;
  /** RegularExpression Id. */
  int LBRACKET = 40;
  /** RegularExpression Id. */
  int RBRACKET = 41;
  /** RegularExpression Id. */
  int COMMA = 42;
  /** RegularExpression Id. */
  int SEMICOLON = 43;
  /** RegularExpression Id. */
  int DOT = 44;
  /** RegularExpression Id. */
  int ASSIGN = 45;
  /** RegularExpression Id. */
  int GT = 46;
  /** RegularExpression Id. */
  int LT = 47;
  /** RegularExpression Id. */
  int BANG = 48;
  /** RegularExpression Id. */
  int HOOK = 49;
  /** RegularExpression Id. */
  int COLON = 50;
  /** RegularExpression Id. */
  int EQ = 51;
  /** RegularExpression Id. */
  int LE = 52;
  /** RegularExpression Id. */
  int GE = 53;
  /** RegularExpression Id. */
  int NE = 54;
  /** RegularExpression Id. */
  int SC_OR = 55;
  /** RegularExpression Id. */
  int SC_AND = 56;
  /** RegularExpression Id. */
  int PLUS = 57;
  /** RegularExpression Id. */
  int MINUS = 58;
  /** RegularExpression Id. */
  int STAR = 59;
  /** RegularExpression Id. */
  int SLASH = 60;
  /** RegularExpression Id. */
  int BIT_AND = 61;
  /** RegularExpression Id. */
  int BIT_OR = 62;
  /** RegularExpression Id. */
  int XOR = 63;
  /** RegularExpression Id. */
  int REM = 64;
  /** RegularExpression Id. */
  int LSHIFT = 65;
  /** RegularExpression Id. */
  int RSHIFT = 66;
  /** RegularExpression Id. */
  int PLUSASSIGN = 67;
  /** RegularExpression Id. */
  int MINUSASSIGN = 68;
  /** RegularExpression Id. */
  int STARASSIGN = 69;
  /** RegularExpression Id. */
  int SLASHASSIGN = 70;
  /** RegularExpression Id. */
  int ANDASSIGN = 71;
  /** RegularExpression Id. */
  int ORASSIGN = 72;
  /** RegularExpression Id. */
  int XORASSIGN = 73;
  /** RegularExpression Id. */
  int REMASSIGN = 74;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 75;
  /** RegularExpression Id. */
  int RSHIFTASSIGN = 76;
  /** RegularExpression Id. */
  int ARROW = 77;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "\"break\"",
    "\"const\"",
    "\"continue\"",
    "\"else\"",
    "\"false\"",
    "\"for\"",
    "\"if\"",
    "\"import\"",
    "\"null\"",
    "\"return\"",
    "\"true\"",
    "\"var\"",
    "\"func\"",
    "\"and\"",
    "\"or\"",
    "\"as\"",
    "\"defer\"",
    "\"in\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\";\"",
    "\".\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\">>\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"=>\"",
  };

}
